diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index 844020c..9fd9edf 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -9,6 +9,10 @@ import java.util.Scanner;
 import java.lang.Character;
 
 public class Board {
+	
+	// True for console debug statements
+	private boolean debugger = false; 
+	
 	// Variable Declaration
 	private BoardCell grid[][];
 	private int numRows;
@@ -17,27 +21,30 @@ public class Board {
 	private String setupConfigFiles;
 	private Map<Character, Room> roomMap = new HashMap<Character, Room>();
 
-	private boolean debugger = false; // True for console debug statements
-
 	private static Board theInstance = new Board();
 
-	// constructor is private to ensure only one can be created
+	// Constructor is private to ensure only one can be created
 	private Board() {
 		super();
 	}
 
-	// this method returns the only Board
+	// Returns the only Board instance
 	public static Board getInstance() {
 		return theInstance;
 	}
 
+	/* Function called to pull data from files, and initialize the game board 
+	 * -Michael 3/5/2023
+	 * */
 	public void initialize() {
 		try {
-			grid = null; // Reset grid for multiple tests
+			// Reset variables for multiple tests
+			grid = null; 
 			
 			// Load data from config files
 			loadSetupConfig();
 			loadLayoutConfig();
+			
 		} catch (BadConfigFormatException e) {
 			System.out.println(e);
 			System.out.println(e.getMessage());
@@ -55,20 +62,28 @@ public class Board {
 
 	}
 
-	// Sets the locations of the layout and setup text files from parameters
+
+	/* Sets the locations of the layout and setup text files from parameters
+	 *  Relies on files always being within relative path data//Filename 
+	 * -Michael 3/5/2023
+	 * */
 	public void setConfigFiles(String layout, String setup) {
 		layoutConfigFile = "data//" + layout;
 		setupConfigFiles = "data//" + setup;
 	}
-
-	// Loads data from setupConfigFiles and initializes rooms
+	
+	
+	/* Loads data from setupConfigFiles and initializes rooms
+	 * -Michael 3/5/2023
+	 * */
 	public void loadSetupConfig() throws BadConfigFormatException {
 		try {
+			// Stores file information per line 
+			String tempStr = "";
+			
 			FileReader reader = new FileReader(setupConfigFiles); // Opens file
 			Scanner in = new Scanner(reader);
 
-			String tempStr = "";
-
 			// Reads in data line by line
 			while (in.hasNextLine()) {
 				tempStr = in.nextLine();
@@ -79,9 +94,9 @@ public class Board {
 				} else {
 					String[] arrFromStr = tempStr.split(", "); // Splits line up for data manipulation	
 					
-					if(arrFromStr[0].equals("Room") || arrFromStr[0].equals("Space")) { 
+					if(arrFromStr[0].equals("Room") || arrFromStr[0].equals("Space")) { // Adds room to roomMap if setup is configured with string room or space
 						roomMap.put(arrFromStr[2].charAt(0), new Room(arrFromStr[1])); 
-					} else {
+					} else { // Throws error if word in file is not recognized
 						in.close(); // Close file
 						throw new BadConfigFormatException("Invalid Format Detected within setupConfigFiles");
 					}
@@ -94,7 +109,10 @@ public class Board {
 		}
 	}
 
-	// Loads in data from layoutConfigFile.csv, sends data to cells and updates cell information
+	/* Loads in data from layoutConfigFile.csv, calculates size of grid, then sends data 
+	 * to cells and updates cell information
+	 * -Michael 3/5/2023
+	 * */
 	public void loadLayoutConfig() throws BadConfigFormatException {
 		// Reset variables for multiple tests
 		numRows = 0;
@@ -107,8 +125,8 @@ public class Board {
 
 			// Reads data from file
 			while(in.hasNextLine()) {
-				numRows++;
-				tempStr = in.nextLine();
+				numRows++; // Counts rows
+				tempStr = in.nextLine(); // Stores string for column count
 			}
 			in.close(); // Close file	
 
@@ -117,7 +135,7 @@ public class Board {
 			throw new BadConfigFormatException();
 		}
 
-		String[] arrFromStr = tempStr.split(",");
+		String[] arrFromStr = tempStr.split(","); // Splits string into columns to determine column count
 		numColumns = arrFromStr.length;
 		if(debugger) {System.out.println("Rows: " + numRows); }
 		if(debugger) {System.out.println("Columns: " + numColumns);	}		
@@ -141,7 +159,7 @@ public class Board {
 			FileReader reader = new FileReader(layoutConfigFile);// Opens file
 			Scanner in = new Scanner(reader);
 
-			in.useDelimiter("[,\n]"); // Tells scanner that a comma separates each data cell
+			in.useDelimiter("[,\n]"); // Tells scanner that a comma or endline separates each data cell
 
 			// Reads data from file
 			while(in.hasNext()) {
@@ -158,6 +176,7 @@ public class Board {
 					grid[rowCount][colCount].setInitial(temp.charAt(0));
 				}
 				else {
+					in.close(); // Close file
 					throw new BadConfigFormatException("Invalid Room Name Detected in LayoutConfigFile");
 				}
 
@@ -192,6 +211,7 @@ public class Board {
 						if(debugger) {System.out.println("endLine");}
 					} else {
 						if(debugger) {System.out.println("Invalid Char: " + temp.charAt(1));}
+						in.close(); // Close file
 						throw new BadConfigFormatException("Invalid Character Detected in LayoutConfigFile");
 					}
 				}
@@ -200,7 +220,7 @@ public class Board {
 			in.close(); // Close file
 
 		} catch (FileNotFoundException e){
-			throw new BadConfigFormatException();
+			throw new BadConfigFormatException("Layout Config File Not Loaded Correctly");
 		} catch (StringIndexOutOfBoundsException e){
 			throw new BadConfigFormatException("EmptyCell");
 		}
@@ -218,11 +238,12 @@ public class Board {
 	public BoardCell getCell(int row, int col) {
 		return grid[row][col];
 	}
-
+	
+	// Returns rooms based on cell initial or cell type
 	public Room getRoom(BoardCell cell) {
 		return roomMap.get(cell.getInitial());
 	}
-
+	
 	public Room getRoom(char c) {
 		return roomMap.get(c);
 	}
